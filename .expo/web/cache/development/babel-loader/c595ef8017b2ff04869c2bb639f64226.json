{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { AppConfig, Games } from \"../../../assets\";\nimport { Theme } from \"../../../assets/styles\";\nimport GameModal from \"./Modal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar windowWidth = Dimensions.get('window').width;\nvar windowHeight = Dimensions.get('window').height;\nexport default function HomeScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    updateRender = _React$useState2[0],\n    setUpdateRender = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    modalVisible = _React$useState4[0],\n    setModalVisible = _React$useState4[1];\n  var _React$useState5 = React.useState(),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    gameId = _React$useState6[0],\n    setGameId = _React$useState6[1];\n\n  function renderGames(id, icon, name, bgColor) {\n    return _jsxs(TouchableOpacity, {\n      style: [styles.gameBox, {\n        width: windowWidth / 2 - 20,\n        backgroundColor: bgColor\n      }],\n      onPress: function onPress() {\n        setModalVisible(true);\n        setGameId(id);\n      },\n\n      activeOpacity: 0.9,\n      children: [_jsx(View, {\n        style: styles.gameIconContainer,\n        children: _jsx(Image, {\n          style: styles.gameIcon,\n          source: icon\n        })\n      }), _jsx(View, {\n        style: styles.gameNameContainer,\n        children: _jsx(Text, {\n          style: styles.gameName,\n          children: name\n        })\n      })]\n    }, id);\n  }\n  var appConfig = AppConfig.appConfig;\n\n  return _jsxs(ScrollView, {\n    style: [styles.container, {\n      backgroundColor: AppConfig.appDarkTheme ? '#1E1E1E' : Theme.Colors.AliceBlue\n    }],\n    showsVerticalScrollIndicator: false,\n    children: [_jsxs(View, {\n      style: styles.header,\n      children: [_jsx(View, {\n        style: styles.headerLeft,\n        children: _jsx(Text, {\n          style: styles.title,\n          children: appConfig.name\n        })\n      }), _jsx(View, {\n        style: styles.headerRight,\n        children: _jsx(TouchableOpacity, {\n          style: styles.themeButton,\n          onPress: function onPress() {\n            alert('A opção ainda não está disponível.');\n          },\n          activeOpacity: 0.6,\n          children: _jsx(Ionicons, {\n            style: [styles.themeButtonIcon, {\n              color: AppConfig.appDarkTheme ? Theme.Colors.MinionYellow : Theme.Colors.MidnigntGreenEagleGreen\n            }],\n            name: AppConfig.appDarkTheme ? \"ios-sunny\" : \"ios-moon\"\n          })\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.main,\n      children: [_jsx(View, {\n        style: styles.gamesSection,\n        children: Games.map(function (game) {\n          return renderGames(game.id, game.icon, game.name, game.theme);\n        })\n      }), _jsx(Modal, {\n        visible: modalVisible,\n        animationType: \"slide\",\n        transparent: true,\n        onRequestClose: function onRequestClose() {\n          return setModalVisible(!modalVisible);\n        },\n        children: _jsx(GameModal, {\n          modalState: modalVisible,\n          gameId: gameId,\n          hideModal: function hideModal() {\n            return setModalVisible(false);\n          },\n          goToGame: function goToGame(gameData) {\n            navigation.navigate(gameData.target, {\n              game: gameData\n            });\n          }\n        })\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","styles","Ionicons","AppConfig","Games","Theme","GameModal","windowWidth","Dimensions","get","width","windowHeight","height","HomeScreen","navigation","useState","updateRender","setUpdateRender","modalVisible","setModalVisible","gameId","setGameId","renderGames","id","icon","name","bgColor","gameBox","backgroundColor","gameIconContainer","gameIcon","gameNameContainer","gameName","appConfig","container","appDarkTheme","Colors","AliceBlue","header","headerLeft","title","headerRight","themeButton","alert","themeButtonIcon","color","MinionYellow","MidnigntGreenEagleGreen","main","gamesSection","map","game","theme","gameData","navigate","target"],"sources":["E:/PROJECTS/- G I T H U B -/-DEVMASTER-/GoodGames/src/components/screens/Home/index.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { \r\n  Dimensions, \r\n  Image, \r\n  Modal, \r\n  ScrollView, \r\n  Text, \r\n  TouchableOpacity, \r\n  View, \r\n  Pressable \r\n} from 'react-native';\r\n\r\nimport styles from './styles';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { AppConfig, Games } from '../../../assets';\r\nimport { Theme } from '../../../assets/styles';\r\nimport GameModal from './Modal';\r\n\r\nconst windowWidth = Dimensions.get('window').width;\r\nconst windowHeight = Dimensions.get('window').height;\r\n\r\nexport default function HomeScreen ({ navigation }) {\r\n  \r\n  const [ updateRender, setUpdateRender ]: any = React.useState(false);\r\n  const [ modalVisible, setModalVisible ]: any = React.useState(false);\r\n  // const [ gameName, setGameName ]: any = React.useState();\r\n  const [ gameId, setGameId ]: any = React.useState();\r\n  // const [ update, setUpdate ]: any = React.useState(true);\r\n\r\n  function renderGames(id: number, icon: string, name: string, bgColor: string) {\r\n    return (\r\n      <TouchableOpacity \r\n        key={id} \r\n        style={[styles.gameBox, {\r\n          width: (windowWidth  / 2) - 20, \r\n          backgroundColor: bgColor\r\n        }]} \r\n        onPress={() => {\r\n          setModalVisible(true);\r\n          // setGameName(game);\r\n          setGameId(id);\r\n          // setUpdate(true);\r\n        }} \r\n        activeOpacity={0.9}\r\n      >\r\n        <View style={styles.gameIconContainer}>\r\n          <Image style={styles.gameIcon} source={icon} />\r\n        </View>\r\n        <View style={styles.gameNameContainer}>\r\n          <Text style={styles.gameName}>{name}</Text>\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n  \r\n  const appConfig = AppConfig.appConfig; // Application configs was declared in here\r\n\r\n  // React.useEffect(() => {\r\n  //   if (update) {\r\n  //     console.log('Game id: ' + gameId);\r\n  //     setUpdate(false);\r\n  //   }\r\n  // }, update);\r\n\r\n  return (\r\n    <ScrollView \r\n      style={[styles.container, {\r\n        backgroundColor: AppConfig.appDarkTheme ? '#1E1E1E' : Theme.Colors.AliceBlue\r\n      }]} \r\n      showsVerticalScrollIndicator={false}\r\n    >\r\n\r\n      {/* Header */}\r\n\r\n      <View style={styles.header}>\r\n        <View style={styles.headerLeft}>\r\n          <Text style={styles.title}>{appConfig.name}</Text>\r\n        </View>\r\n        <View style={styles.headerRight}>\r\n          <TouchableOpacity \r\n            style={styles.themeButton} \r\n            onPress={() => {\r\n              // this.setState({\r\n              //   updateRender: !this.state.updateRender\r\n              // });\r\n              // AppConfig.appDarkTheme = !AppConfig.appDarkTheme;\r\n              alert('A opção ainda não está disponível.');\r\n            }} \r\n            activeOpacity={0.6}\r\n          >\r\n            <Ionicons \r\n              style={[styles.themeButtonIcon, {\r\n                color: AppConfig.appDarkTheme ? Theme.Colors.MinionYellow : Theme.Colors.MidnigntGreenEagleGreen\r\n              }]} \r\n              name={AppConfig.appDarkTheme ? \"ios-sunny\" : \"ios-moon\"} \r\n            />\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n      \r\n      {/* Main */}\r\n\r\n      <View style={styles.main}>\r\n        <View style={styles.gamesSection}>\r\n          {\r\n            Games.map(game => (\r\n              renderGames(game.id, game.icon, game.name, game.theme)\r\n            ))\r\n          }\r\n        </View>\r\n\r\n        {/* Modal */}\r\n        \r\n        <Modal \r\n          visible={modalVisible}\r\n          animationType=\"slide\" \r\n          transparent={true} \r\n          onRequestClose={() => setModalVisible(!modalVisible)}\r\n        >\r\n          <GameModal \r\n            modalState={modalVisible} \r\n            gameId={gameId} \r\n            hideModal={() => setModalVisible(false)} \r\n            goToGame={(gameData) => {\r\n              navigation.navigate(gameData.target, {\r\n                game: gameData,\r\n              });\r\n            }}\r\n          />\r\n        </Modal>\r\n\r\n      </View>\r\n\r\n    </ScrollView>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}